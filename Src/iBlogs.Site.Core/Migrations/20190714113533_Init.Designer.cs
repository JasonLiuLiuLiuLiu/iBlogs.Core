// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iBlogs.Site.Core.EntityFrameworkCore;

namespace iBlogs.Site.Core.Migrations
{
    [DbContext(typeof(iBlogsContext))]
    [Migration("20190714113533_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Attach.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("FKey");

                    b.Property<string>("FName");

                    b.Property<string>("FType");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Comment.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agent");

                    b.Property<string>("Author");

                    b.Property<int>("Cid");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsAuthor");

                    b.Property<string>("Mail");

                    b.Property<int>("OwnerId");

                    b.Property<int>("Parent");

                    b.Property<int>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Content.Contents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowComment");

                    b.Property<bool>("AllowFeed");

                    b.Property<bool>("AllowPing");

                    b.Property<int>("AuthorId");

                    b.Property<string>("Categories");

                    b.Property<int>("CommentsNum");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("FmtType");

                    b.Property<int>("Hits");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Slug");

                    b.Property<int>("Status");

                    b.Property<string>("Tags");

                    b.Property<string>("ThumbImg");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Meta.Metas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Slug");

                    b.Property<int>("Sort");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Relationship.Relationships", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<int>("Mid");

                    b.HasKey("Id");

                    b.HasIndex("Cid");

                    b.HasIndex("Mid");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Option.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Security.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Activated");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("GroupName");

                    b.Property<string>("HomeUrl");

                    b.Property<DateTime>("Logged");

                    b.Property<string>("Password");

                    b.Property<string>("ScreenName");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Attach.Attachment", b =>
                {
                    b.HasOne("iBlogs.Site.Core.Security.Users", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Comment.Comments", b =>
                {
                    b.HasOne("iBlogs.Site.Core.Blog.Content.Contents", "Article")
                        .WithMany()
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Content.Contents", b =>
                {
                    b.HasOne("iBlogs.Site.Core.Security.Users", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("iBlogs.Site.Core.Blog.Relationship.Relationships", b =>
                {
                    b.HasOne("iBlogs.Site.Core.Blog.Content.Contents", "Content")
                        .WithMany()
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iBlogs.Site.Core.Blog.Meta.Metas", "Meta")
                        .WithMany()
                        .HasForeignKey("Mid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
